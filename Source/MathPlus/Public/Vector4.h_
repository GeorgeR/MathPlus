#pragma once

#include "CoreMinimal.h"

#pragma region Declaration
template <typename TElementType>
struct TVector4D
{
private:
    typedef TVector4D<TElementType> TVectorType;

public:
#pragma region Data
    TElementType X;
    TElementType Y;
    TElementType Z;
    TElementType W;
#pragma endregion Data

#pragma region Statics
    MATHPLUS_API static const TVectorType Zero;
    MATHPLUS_API static const TVectorType One;
    MATHPLUS_API static const TVectorType Up;
    MATHPLUS_API static const TVectorType Right;
    MATHPLUS_API static const TVectorType Forward;
#pragma endregion Statics

#pragma region Constructors
#if ENABLE_NAN_DIAGNOSTIC
    FORCEINLINE void DiagnosticCheckNaN() const
    {
        if (ContainsNaN())
        {
            logOrEnsureNanError(TEXT("FVector contains NaN: %s"), *ToString());
            *const_cast<TVectorType*>(this) = ZeroVector;
        }
    }

    FORCEINLINE void DiagnosticCheckNaN(const TCHAR* Message) const
    {
        if (ContainsNaN())
        {
            logOrEnsureNanError(TEXT("%s: FVector contains NaN: %s"), Message, *ToString());
            *const_cast<TVectorType*>(this) = ZeroVector;
        }
    }
#else
    FORCEINLINE void DiagnosticCheckNaN() const {}
    FORCEINLINE void DiagnosticCheckNaN(const TCHAR* Message) const {}
#endif
    FORCEINLINE TVector4D();
    explicit FORCEINLINE TVector4D(TElementType Value);
    FORCEINLINE TVector4D(TElementType X, TElementType Y, TElementType Z, TElementType W);
    explicit FORCEINLINE TVector4D(const TVector2D<TElementType> XY, TVector2D<TElementType> ZW);
    explicit FORCEINLINE TVector4D(const TVector3D<TElementType> Vector, TElementType W);
    FORCEINLINE TVector4D(const TVector4D<TElementType>& Vector);
    explicit FORCEINLINE TVector4D(const TPoint2D<TElementType> XY, const TPoint2D<TElementType> ZW);
    explicit FORCEINLINE TVector4D(const TPoint3D<TElementType> Point, TElementType W);
    explicit FORCEINLINE TVector4D(const TPoint4D<TElementType> Point);
    explicit FORCEINLINE TVector4D(EForceInit);
#pragma endregion Constructors

#pragma region Operators
    /* Cross Product */
    FORCEINLINE TVectorType operator^(const TVectorType& Other) const;
    FORCEINLINE static TVectorType CrossProduct(const TVectorType& A, const TVectorType& B);

    /* Dot Product */
    FORCEINLINE TElementType operator|(const TVectorType& Other) const;
    FORCEINLINE static TElementType DotProduct(const TVectorType& A, const TVectorType& B);

    FORCEINLINE TVectorType operator+(const TVectorType& Other) const;
    FORCEINLINE TVectorType operator+=(const TVectorType& Other);
    FORCEINLINE TVectorType operator+(TElementType Scalar) const;

    FORCEINLINE TVectorType operator-(const TVectorType& Other) const;
    FORCEINLINE TVectorType operator-=(const TVectorType& Other);
    FORCEINLINE TVectorType operator-(TElementType Scalar) const;
    
    FORCEINLINE TVectorType operator*(const TVectorType& Other) const;
    FORCEINLINE TVectorType operator*=(const TVectorType& Other);
    FORCEINLINE TVectorType operator*(TElementType Scalar) const;
    FORCEINLINE TVectorType operator*=(TElementType Scalar);

    FORCEINLINE TVectorType operator/(const TVectorType& Other) const;
    TVectorType operator/=(const TVectorType& Other);
    TVectorType operator/(TElementType Scalar) const;
    TVectorType operator/=(TElementType Scalar);

    FORCEINLINE TVectorType operator-() const;

    bool operator==(const TVectorType& Other) const;
    bool operator!=(const TVectorType& Other) const;

    friend uint32 GetTypeHash(const TVectorType& Value)
    {
        return FCrc::MemCrc_DEPRECATED(&Value, sizeof(TVectorType));
    }

    bool Equals(const TVectorType& Other, TElementType Tolerance) const;
    bool AllComponentsEqual(TElementType Tolerance) const;
#pragma endregion Operators

#pragma region Accessors
    TElementType operator[](uint8 Index) const;
    TElementType& operator[](uint8 Index);

    TElementType GetComponent(uint8 Index) const;
    TElementType& GetComponent(uint8 Index);

    TElementType GetComponentForAxis(EAxis::Type Axis) const;
    void SetComponentForAxis(EAxis::Type Axis, TElementType Value);
#pragma endregion Accessors
    
    void Set(TElementType X, TElementType Y, TElementType Z, TElementType W);

    TElementType GetMin() const;
    TElementType GetMax() const;

    TElementType GetAbsMin() const;
    TElementType GetAbsMax() const;

    TVectorType ComponentMin(const TVectorType& Other) const;
    TVectorType ComponentMax(const TVectorType& Other) const;

    TVectorType GetAbs() const;

    TElementType Size() const;
    TElementType SizeSquared() const;

    TElementType Size2D() const;
    TElementType SizeSquared2D() const;

    bool IsNearlyZero(TElementType Tolerance) const;
    bool IsZero() const;

    bool Normalize(TElementType Tolerance);
    bool IsNormalized() const;

    TVectorType GetSafeNormal(TElementType Tolerance) const;

    FString ToString() const;
    FText ToText() const;

    static FORCEINLINE TElementType Distance(const TVectorType& A, const TVectorType& B);
    static FORCEINLINE TElementType DistanceSquared(const TVectorType& A, const TVectorType& B);

#pragma region Serialization
    friend FArchive& operator<<(FArchive& Ar, TVectorType& Value);
    friend void operator<<(FStructuredArchive::FSlot Slot, TVectorType& Value);
    bool Serialize(FArchive& Ar);
    bool Serialize(FStructuredArchive::FSlot Slot);
    MATHPLUS_API bool NetSerialize(FArchive& ar, class UPackageMap* Map, bool& bOutSuccess);
#pragma endregion Serialization
};

template <typename TElementType>
MATHPLUS_API bool TVector4D<TElementType>::NetSerialize(FArchive& ar, class UPackageMap* Map, bool& bOutSuccess)
{

}

template <typename TElementType>
bool TVector4D<TElementType>::Serialize(FStructuredArchive::FSlot Slot)
{

}

template <typename TElementType>
bool TVector4D<TElementType>::Serialize(FArchive& Ar)
{

}

template <typename TElementType>
FORCEINLINE TElementType TVector4D<TElementType>::DistanceSquared(const TVectorType& A, const TVectorType& B)
{

}

template <typename TElementType>
FORCEINLINE TElementType TVector4D<TElementType>::Distance(const TVectorType& A, const TVectorType& B)
{

}

template <typename TElementType>
FText TVector4D<TElementType>::ToText() const
{

}

template <typename TElementType>
FString TVector4D<TElementType>::ToString() const
{

}

template <typename TElementType>
TVectorType TVector4D<TElementType>::GetSafeNormal(TElementType Tolerance) const
{

}

template <typename TElementType>
bool TVector4D<TElementType>::IsNormalized() const
{

}

template <typename TElementType>
bool TVector4D<TElementType>::Normalize(TElementType Tolerance)
{

}

template <typename TElementType>
bool TVector4D<TElementType>::IsZero() const
{

}

template <typename TElementType>
bool TVector4D<TElementType>::IsNearlyZero(TElementType Tolerance) const
{

}

template <typename TElementType>
TElementType TVector4D<TElementType>::SizeSquared2D() const
{

}

template <typename TElementType>
TElementType TVector4D<TElementType>::Size2D() const
{

}

template <typename TElementType>
TElementType TVector4D<TElementType>::SizeSquared() const
{

}

template <typename TElementType>
TElementType TVector4D<TElementType>::Size() const
{

}

template <typename TElementType>
TVectorType TVector4D<TElementType>::GetAbs() const
{

}

template <typename TElementType>
TVectorType TVector4D<TElementType>::ComponentMax(const TVectorType& Other) const
{

}

template <typename TElementType>
TVectorType TVector4D<TElementType>::ComponentMin(const TVectorType& Other) const
{

}

template <typename TElementType>
TElementType TVector4D<TElementType>::GetAbsMax() const
{

}

template <typename TElementType>
TElementType TVector4D<TElementType>::GetAbsMin() const
{

}

template <typename TElementType>
TElementType TVector4D<TElementType>::GetMax() const
{

}

template <typename TElementType>
TElementType TVector4D<TElementType>::GetMin() const
{

}

template <typename TElementType>
void TVector4D<TElementType>::Set(TElementType X, TElementType Y, TElementType Z, TElementType W)
{

}

template <typename TElementType>
void TVector4D<TElementType>::SetComponentForAxis(EAxis::Type Axis, TElementType Value)
{

}

template <typename TElementType>
TElementType TVector4D<TElementType>::GetComponentForAxis(EAxis::Type Axis) const
{

}

template <typename TElementType>
TElementType& TVector4D<TElementType>::GetComponent(uint8 Index)
{

}

template <typename TElementType>
TElementType TVector4D<TElementType>::GetComponent(uint8 Index) const
{

}

template <typename TElementType>
TElementType& TVector4D<TElementType>::operator[](uint8 Index)
{

}

template <typename TElementType>
TElementType TVector4D<TElementType>::operator[](uint8 Index) const
{

}

template <typename TElementType>
bool TVector4D<TElementType>::AllComponentsEqual(TElementType Tolerance) const
{

}

template <typename TElementType>
bool TVector4D<TElementType>::Equals(const TVectorType& Other, TElementType Tolerance) const
{

}

template <typename TElementType>
bool TVector4D<TElementType>::operator!=(const TVectorType& Other) const
{

}

template <typename TElementType>
bool TVector4D<TElementType>::operator==(const TVectorType& Other) const
{

}

template <typename TElementType>
FORCEINLINE TVectorType TVector4D<TElementType>::operator-() const
{

}

template <typename TElementType>
TVectorType TVector4D<TElementType>::operator/=(TElementType Scalar)
{

}

template <typename TElementType>
TVectorType TVector4D<TElementType>::operator/(TElementType Scalar) const
{

}

template <typename TElementType>
TVectorType TVector4D<TElementType>::operator/=(const TVectorType& Other)
{

}

template <typename TElementType>
FORCEINLINE TVectorType TVector4D<TElementType>::operator/(const TVectorType& Other) const
{

}

template <typename TElementType>
FORCEINLINE TVectorType TVector4D<TElementType>::operator*=(TElementType Scalar)
{

}

template <typename TElementType>
FORCEINLINE TVectorType TVector4D<TElementType>::operator*(TElementType Scalar) const
{

}

template <typename TElementType>
FORCEINLINE TVectorType TVector4D<TElementType>::operator*=(const TVectorType& Other)
{

}

template <typename TElementType>
FORCEINLINE TVectorType TVector4D<TElementType>::operator*(const TVectorType& Other) const
{

}

template <typename TElementType>
FORCEINLINE TVectorType TVector4D<TElementType>::operator-(TElementType Scalar) const
{

}

template <typename TElementType>
FORCEINLINE TVectorType TVector4D<TElementType>::operator-=(const TVectorType& Other)
{

}

template <typename TElementType>
FORCEINLINE TVectorType TVector4D<TElementType>::operator-(const TVectorType& Other) const
{

}

template <typename TElementType>
FORCEINLINE TVectorType TVector4D<TElementType>::operator+(TElementType Scalar) const
{

}

template <typename TElementType>
FORCEINLINE TVectorType TVector4D<TElementType>::operator+=(const TVectorType& Other)
{

}

template <typename TElementType>
FORCEINLINE TVectorType TVector4D<TElementType>::operator+(const TVectorType& Other) const
{

}

template <typename TElementType>
FORCEINLINE TElementType TVector4D<TElementType>::DotProduct(const TVectorType& A, const TVectorType& B)
{

}

template <typename TElementType>
FORCEINLINE TElementType TVector4D<TElementType>::operator|(const TVectorType& Other) const
{

}

template <typename TElementType>
FORCEINLINE TVectorType TVector4D<TElementType>::CrossProduct(const TVectorType& A, const TVectorType& B)
{

}

template <typename TElementType>
FORCEINLINE TVectorType TVector4D<TElementType>::operator^(const TVectorType& Other) const
{

}

template <typename TElementType>
FORCEINLINE TVector4D<TElementType>::TVector4D(EForceInit)
{

}

template <typename TElementType>
FORCEINLINE TVector4D<TElementType>::TVector4D(const TPoint4D<TElementType> Point)
{

}

template <typename TElementType>
FORCEINLINE TVector4D<TElementType>::TVector4D(const TPoint3D<TElementType> Point, TElementType W)
{

}

template <typename TElementType>
FORCEINLINE TVector4D<TElementType>::TVector4D(const TPoint2D<TElementType> XY, const TPoint2D<TElementType> ZW)
{

}

template <typename TElementType>
FORCEINLINE TVector4D<TElementType>::TVector4D(const TVector4D<TElementType>& Vector)
{

}

template <typename TElementType>
FORCEINLINE TVector4D<TElementType>::TVector4D(const TVector3D<TElementType> Vector, TElementType W)
{

}

template <typename TElementType>
FORCEINLINE TVector4D<TElementType>::TVector4D(const TVector2D<TElementType> XY, TVector2D<TElementType> ZW)
{

}

template <typename TElementType>
FORCEINLINE TVector4D<TElementType>::TVector4D(TElementType X, TElementType Y, TElementType Z, TElementType W)
{

}

template <typename TElementType>
FORCEINLINE TVector4D<TElementType>::TVector4D(TElementType Value)
{

}

template <typename TElementType>
FORCEINLINE TVector4D<TElementType>::TVector4D()
{

}

#pragma endregion Declaration

#pragma region Definition
#define TVectorType TVector4D<TElementType>
#define TemplateDeclaration template <typename TElementType>
#pragma region Constructors
TemplateDeclaration
FORCEINLINE TVectorType::TVector4D() { }

TemplateDeclaration
FORCEINLINE TVectorType::TVector4D(TElementType Value)
    : X(Value),
    Y(Value),
    Z(Value),
    W(Value)
{ }

TemplateDeclaration
FORCEINLINE TVectorType::TVector4D(TElementType X, TElementType Y, TElementType Z, TElementType W)
    : X(X),
    Y(Y),
    Z(Z),
    W(W)
{ }

TemplateDeclaration
FORCEINLINE TVectorType::TVector4D(EForceInit)
    : X(0),
    Y(0),
    Z(0),
    W(0)
{ }
#pragma endregion Constructors

#pragma region Accessors
TemplateDeclaration
FORCEINLINE const TElementType& TVectorType::operator()(uint8 Index) const
{
    return (&X)[Index];
}

TemplateDeclaration
FORCEINLINE TElementType& TVectorType::operator()(uint8 Index)
{
    return (&X)[Index];
}

TemplateDeclaration
FORCEINLINE TElementType TVectorType::operator[](uint8 Index) const
{
    check(Index >= 0 && Index < 4);
    if (Index == 0)
        return X;
    else if (Index == 1)
        return Y;
    else if (Index == 2)
        return Z;
    else if (Index == 3)
        return W;
}

TemplateDeclaration
FORCEINLINE TElementType& TVectorType::operator[](uint8 Index)
{
    check(Index >= 0 && Index < 4);
    if (Index == 0)
        return X;
    else if (Index == 1)
        return Y;
    else if (Index == 2)
        return Z;
    else if (Index == 3)
        return W;
}
#pragma endregion Accessors

#pragma region Operators

#pragma region Equality
TemplateDeclaration
FORCEINLINE bool TVectorType::operator==(const TVectorType& Other) const
{
    return X == Other.X && Y == Other.Y && Z == Other.Z && W == Other.W;
}

TemplateDeclaration
FORCEINLINE bool TVectorType::operator!=(const TVectorType& Other) const
{
    return (X != Other.X) || (Y != Other.Y) || (Z != Other.Z) || (W != Other.W);
}
#pragma endregion Equality

#pragma region Add
TemplateDeclaration
FORCEINLINE TVectorType TVectorType::operator+=(const TElementType& Other) const
{
    return TVectorType(*this) += Other;
}

TemplateDeclaration
FORCEINLINE TVectorType& TVectorType::operator+=(const TElementType& Other)
{
    X += Other;
    Y += Other;
    Z += Other;
    W += Other;

    return *this;
}

TemplateDeclaration
FORCEINLINE TVectorType TVectorType::operator+=(const TVectorType& Other) const
{
    return TVectorType(*this) += Other;
}

TemplateDeclaration
FORCEINLINE TVectorType& TVectorType::operator+=(const TVectorType& Other)
{
    X += Other.X;
    Y += Other.Y;
    Z += Other.Z;
    W += Other.W;

    return *this;
}
#pragma endregion Add

#pragma region Subtract
TemplateDeclaration
FORCEINLINE TVectorType TVectorType::operator-=(const TElementType& Other) const
{
    return TVectorType(*this) -= Other;
}

TemplateDeclaration
FORCEINLINE TVectorType& TVectorType::operator-=(const TElementType& Other)
{
    X -= Other;
    Y -= Other;
    Z -= Other;
    W -= Other;

    return *this;
}

TemplateDeclaration
FORCEINLINE TVectorType TVectorType::operator-=(const TVectorType& Other) const
{
    return TVectorType(*this) -= Other;
}

TemplateDeclaration
FORCEINLINE TVectorType& TVectorType::operator-=(const TVectorType& Other)
{
    X -= Other.X;
    Y -= Other.X;
    Z -= Other.Z;
    W -= Other.W;

    return *this;
}
#pragma endregion Subtract

#pragma region Multiply
TemplateDeclaration
FORCEINLINE TVectorType TVectorType::operator*=(TElementType Scale) const
{
    return TVectorType(*this) *= Other;
}

TemplateDeclaration
FORCEINLINE TVectorType& TVectorType::operator*=(TElementType Scale)
{
    X *= Scale;
    Y *= Scale;
    Z *= Scale;
    W *= Scale;

    return *this;
}

TemplateDeclaration
FORCEINLINE TVectorType TVectorType::operator*=(const TVectorType& Other) const
{
    return TVectorType(*this) *= Other;
}

TemplateDeclaration
FORCEINLINE TVectorType& TVectorType::operator*=(const TVectorType& Other)
{
    X *= Other.X;
    Y *= Other.Y;
    Z *= Other.Z;
    W *= Other.W;

    return *this;
}
#pragma endregion Multiply

#pragma region Divide
TemplateDeclaration
TVectorType TVectorType::operator/=(TElementType Divisor) const
{
    return TVectorType(*this) /= Other;
}

TemplateDeclaration
TVectorType& TVectorType::operator/=(TElementType Divisor)
{
    X /= Divisor;
    Y /= Divisor;
    Z /= Divisor;
    W /= Divisor;

    return *this;
}

TemplateDeclaration
TVectorType TVectorType::operator/=(const TVectorType& Other) const
{
    return TVectorType(*this) /= Other;
}

TemplateDeclaration
TVectorType& TVectorType::operator/=(const TElementType& Other)
{
    X /= Other.X;
    Y /= Other.Y;
    Z /= Other.Z;
    W /= Other.W;

    return *this;
}
#pragma endregion Divide
#pragma endregion Operators

TemplateDeclaration
FORCEINLINE TVectorType TVectorType::ComponentMin(const TVectorType& Other) const
{
    return TVectorType(FMath::Min(X, Other.X), FMath::Min(Y, Other.Y), FMath::Min(Z, Other.Z), FMath::Min(W, Other.W));
}

TemplateDeclaration
FORCEINLINE TVectorType TVectorType::ComponentMax(const TVectorType& Other) const
{
    return TVectorType(FMath::Max(X, Other.X), FMath::Max(Y, Other.Y), FMath::Max(Z, Other.Z), FMath::Max(W, Other.W));
}

TemplateDeclaration
FORCEINLINE TElementType TVectorType::GetMin() const
{
    return FMath::Min(FMath::Min(FMath::Min(X, Y), Z), W);
}

TemplateDeclaration
FORCEINLINE TElementType TVectorType::GetMax() const
{
    return FMath::Max(FMath::Max(FMath::Max(X, Y), Z), W);
}

TemplateDeclaration
FORCEINLINE TElementType TVectorType::Size() const
{
    return TElementType(FMath::Sqrt(X * X + Y * Y + Z * Z + W * W));
}

TemplateDeclaration
FORCEINLINE TElementType TVectorType::SizeSquared() const
{
    return X * X + Y * Y + Z * Z + W * W;
}

TemplateDeclaration
FORCEINLINE FString TVectorType::ToString() const
{
    return FString::Printf(TEXT("X=%d Y=%d Z=%d W=%d"), X, Y, Z, W);
}

#pragma region Serialization
TemplateDeclaration
FORCEINLINE FArchive& TVectorType::operator<<(FArchive& Ar, TVectorType& Value)
{
    return A << Value.X << Value.Y << Value.Z << Value.W;
}

TemplateDeclaration
FORCEINLINE void TVectorType::operator<<(FStructuredArchive::FSlot Slot, TVectorType& Value)
{
    FStructuredArchive::FRecord Record = Slot.EnterRecord();
    Record << NAMED_ITEM("X", Value.X) << NAMED_ITEM("Y", Value.Y) << NAMED_ITEM("Z", Value.Z) << NAMED_ITEM("W", Value.W);
}

TemplateDeclaration
FORCEINLINE bool TVectorType::Serialize(FArchive& Ar)
{
    Ar << *this;
    return true;
}

TemplateDeclaration
FORCEINLINE bool TVectorType::Serialize(FStructuredArchive::FSlot Slot)
{
    Slot << *this;
    return true;
}
#pragma endregion Serialization

TemplateDeclaration
struct TIsPODType<TVectorType> { enum { Value = true }; };

#undef TVectorType
#undef TemplateDeclaration
#pragma endregion Definition

typedef TVector4D<int8> FBytePoint4D;
typedef TVector4D<int16> FShorTVector4D;
typedef TVector4D<int32> FInTVector4D;
typedef TVector4D<FFloat16> FHalfPoint4D;
typedef TVector4D<float> FFloaTVector4D;
typedef TVector4D<double> FDoublePoint4D;